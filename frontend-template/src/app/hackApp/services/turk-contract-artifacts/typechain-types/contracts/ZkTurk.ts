/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ZkTurk {
  export type ProblemStruct = {
    id: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    title: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    taskUrls: PromiseOrValue<string>[];
    asnwers: PromiseOrValue<string>[];
    workersMax: PromiseOrValue<BigNumberish>;
    taskPriceWei: PromiseOrValue<BigNumberish>;
    answersMax: PromiseOrValue<BigNumberish>;
  };

  export type ProblemStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string[],
    string[],
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    owner: string;
    title: string;
    description: string;
    taskUrls: string[];
    asnwers: string[];
    workersMax: BigNumber;
    taskPriceWei: BigNumber;
    answersMax: BigNumber;
  };

  export type TaskAnswerStruct = {
    problemId: PromiseOrValue<BigNumberish>;
    taskId: PromiseOrValue<BigNumberish>;
    worker: PromiseOrValue<string>;
    cipheredAnswer: PromiseOrValue<BytesLike>;
    answer: PromiseOrValue<string>;
  };

  export type TaskAnswerStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    problemId: BigNumber;
    taskId: BigNumber;
    worker: string;
    cipheredAnswer: string;
    answer: string;
  };
}

export interface ZkTurkInterface extends utils.Interface {
  functions: {
    "NO_KEY_FLAG()": FunctionFragment;
    "addProblem(string,string,string[],string[],uint256,uint256,uint256)": FunctionFragment;
    "getProblem(uint256)": FunctionFragment;
    "getProblemTasks(uint256)": FunctionFragment;
    "getProblems()": FunctionFragment;
    "getTaskAnswers()": FunctionFragment;
    "getWorkerToProblemAnswerIds(address,uint256)": FunctionFragment;
    "isAnswerAllowed(string,uint256)": FunctionFragment;
    "isSeedValid(bytes32,string,address,bytes)": FunctionFragment;
    "isTaskNotAnsweredByWorker(uint256,uint256)": FunctionFragment;
    "joinProblem(uint256,address,uint256,uint256,uint256[8])": FunctionFragment;
    "owner()": FunctionFragment;
    "problemFee()": FunctionFragment;
    "problemStake()": FunctionFragment;
    "problemToAnswers(uint256,uint256)": FunctionFragment;
    "problems(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetActiveProblem()": FunctionFragment;
    "setUseVerification(bool)": FunctionFragment;
    "solveTask(uint256,uint256,bytes)": FunctionFragment;
    "taskAnswers(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "useVerification()": FunctionFragment;
    "withdrawAndDecipher(address,uint256,uint256[],string[],bytes32)": FunctionFragment;
    "workerToProblem(address)": FunctionFragment;
    "workerToProblemAnswerIds(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NO_KEY_FLAG"
      | "addProblem"
      | "getProblem"
      | "getProblemTasks"
      | "getProblems"
      | "getTaskAnswers"
      | "getWorkerToProblemAnswerIds"
      | "isAnswerAllowed"
      | "isSeedValid"
      | "isTaskNotAnsweredByWorker"
      | "joinProblem"
      | "owner"
      | "problemFee"
      | "problemStake"
      | "problemToAnswers"
      | "problems"
      | "renounceOwnership"
      | "resetActiveProblem"
      | "setUseVerification"
      | "solveTask"
      | "taskAnswers"
      | "transferOwnership"
      | "useVerification"
      | "withdrawAndDecipher"
      | "workerToProblem"
      | "workerToProblemAnswerIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NO_KEY_FLAG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProblem",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProblem",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProblemTasks",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProblems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTaskAnswers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWorkerToProblemAnswerIds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAnswerAllowed",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSeedValid",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTaskNotAnsweredByWorker",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinProblem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "problemFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "problemStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "problemToAnswers",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "problems",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetActiveProblem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUseVerification",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "solveTask",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskAnswers",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "useVerification",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAndDecipher",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "workerToProblem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "workerToProblemAnswerIds",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "NO_KEY_FLAG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addProblem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProblem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProblemTasks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProblems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTaskAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWorkerToProblemAnswerIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAnswerAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSeedValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTaskNotAnsweredByWorker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinProblem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "problemFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "problemStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "problemToAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "problems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetActiveProblem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUseVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solveTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taskAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAndDecipher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerToProblem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "workerToProblemAnswerIds",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "SolveProblem(uint256,uint256,bytes,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolveProblem"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SolveProblemEventObject {
  _problemId: BigNumber;
  _taskId: BigNumber;
  _cipheredAnswer: string;
  _answerId: BigNumber;
}
export type SolveProblemEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  SolveProblemEventObject
>;

export type SolveProblemEventFilter = TypedEventFilter<SolveProblemEvent>;

export interface ZkTurk extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZkTurkInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NO_KEY_FLAG(overrides?: CallOverrides): Promise<[string]>;

    addProblem(
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      urlToImgs: PromiseOrValue<string>[],
      asnwers: PromiseOrValue<string>[],
      workersMax: PromiseOrValue<BigNumberish>,
      taskPriceWei: PromiseOrValue<BigNumberish>,
      answersMax: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProblem(
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ZkTurk.ProblemStructOutput]>;

    getProblemTasks(
      _problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getProblems(
      overrides?: CallOverrides
    ): Promise<[ZkTurk.ProblemStructOutput[]]>;

    getTaskAnswers(
      overrides?: CallOverrides
    ): Promise<[ZkTurk.TaskAnswerStructOutput[]]>;

    getWorkerToProblemAnswerIds(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    isAnswerAllowed(
      answer: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isSeedValid(
      seed: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<string>,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTaskNotAnsweredByWorker(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinProblem(
      problemId: PromiseOrValue<BigNumberish>,
      signal: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    problemFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    problemStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    problemToAnswers(
      problemId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    problems(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        owner: string;
        title: string;
        description: string;
        workersMax: BigNumber;
        taskPriceWei: BigNumber;
        answersMax: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetActiveProblem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUseVerification(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    solveTask(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      cipheredAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taskAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        problemId: BigNumber;
        taskId: BigNumber;
        worker: string;
        cipheredAnswer: string;
        answer: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    useVerification(overrides?: CallOverrides): Promise<[boolean]>;

    withdrawAndDecipher(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      taskAnswerIds: PromiseOrValue<BigNumberish>[],
      answers: PromiseOrValue<string>[],
      seedPhrase: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    workerToProblem(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    workerToProblemAnswerIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  NO_KEY_FLAG(overrides?: CallOverrides): Promise<string>;

  addProblem(
    title: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    urlToImgs: PromiseOrValue<string>[],
    asnwers: PromiseOrValue<string>[],
    workersMax: PromiseOrValue<BigNumberish>,
    taskPriceWei: PromiseOrValue<BigNumberish>,
    answersMax: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProblem(
    problemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ZkTurk.ProblemStructOutput>;

  getProblemTasks(
    _problemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProblems(overrides?: CallOverrides): Promise<ZkTurk.ProblemStructOutput[]>;

  getTaskAnswers(
    overrides?: CallOverrides
  ): Promise<ZkTurk.TaskAnswerStructOutput[]>;

  getWorkerToProblemAnswerIds(
    worker: PromiseOrValue<string>,
    problemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  isAnswerAllowed(
    answer: PromiseOrValue<string>,
    problemId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isSeedValid(
    seed: PromiseOrValue<BytesLike>,
    message: PromiseOrValue<string>,
    signer: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTaskNotAnsweredByWorker(
    problemId: PromiseOrValue<BigNumberish>,
    taskId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinProblem(
    problemId: PromiseOrValue<BigNumberish>,
    signal: PromiseOrValue<string>,
    root: PromiseOrValue<BigNumberish>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    proof: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  problemFee(overrides?: CallOverrides): Promise<BigNumber>;

  problemStake(overrides?: CallOverrides): Promise<BigNumber>;

  problemToAnswers(
    problemId: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  problems(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      owner: string;
      title: string;
      description: string;
      workersMax: BigNumber;
      taskPriceWei: BigNumber;
      answersMax: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetActiveProblem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUseVerification(
    _state: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  solveTask(
    problemId: PromiseOrValue<BigNumberish>,
    taskId: PromiseOrValue<BigNumberish>,
    cipheredAnswer: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taskAnswers(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string] & {
      problemId: BigNumber;
      taskId: BigNumber;
      worker: string;
      cipheredAnswer: string;
      answer: string;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  useVerification(overrides?: CallOverrides): Promise<boolean>;

  withdrawAndDecipher(
    worker: PromiseOrValue<string>,
    problemId: PromiseOrValue<BigNumberish>,
    taskAnswerIds: PromiseOrValue<BigNumberish>[],
    answers: PromiseOrValue<string>[],
    seedPhrase: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  workerToProblem(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  workerToProblemAnswerIds(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    NO_KEY_FLAG(overrides?: CallOverrides): Promise<string>;

    addProblem(
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      urlToImgs: PromiseOrValue<string>[],
      asnwers: PromiseOrValue<string>[],
      workersMax: PromiseOrValue<BigNumberish>,
      taskPriceWei: PromiseOrValue<BigNumberish>,
      answersMax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProblem(
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ZkTurk.ProblemStructOutput>;

    getProblemTasks(
      _problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProblems(
      overrides?: CallOverrides
    ): Promise<ZkTurk.ProblemStructOutput[]>;

    getTaskAnswers(
      overrides?: CallOverrides
    ): Promise<ZkTurk.TaskAnswerStructOutput[]>;

    getWorkerToProblemAnswerIds(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isAnswerAllowed(
      answer: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isSeedValid(
      seed: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<string>,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTaskNotAnsweredByWorker(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinProblem(
      problemId: PromiseOrValue<BigNumberish>,
      signal: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    problemFee(overrides?: CallOverrides): Promise<BigNumber>;

    problemStake(overrides?: CallOverrides): Promise<BigNumber>;

    problemToAnswers(
      problemId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    problems(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, string, string, BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        owner: string;
        title: string;
        description: string;
        workersMax: BigNumber;
        taskPriceWei: BigNumber;
        answersMax: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetActiveProblem(overrides?: CallOverrides): Promise<void>;

    setUseVerification(
      _state: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    solveTask(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      cipheredAnswer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taskAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string] & {
        problemId: BigNumber;
        taskId: BigNumber;
        worker: string;
        cipheredAnswer: string;
        answer: string;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    useVerification(overrides?: CallOverrides): Promise<boolean>;

    withdrawAndDecipher(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      taskAnswerIds: PromiseOrValue<BigNumberish>[],
      answers: PromiseOrValue<string>[],
      seedPhrase: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    workerToProblem(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToProblemAnswerIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SolveProblem(uint256,uint256,bytes,uint256)"(
      _problemId?: null,
      _taskId?: null,
      _cipheredAnswer?: null,
      _answerId?: null
    ): SolveProblemEventFilter;
    SolveProblem(
      _problemId?: null,
      _taskId?: null,
      _cipheredAnswer?: null,
      _answerId?: null
    ): SolveProblemEventFilter;
  };

  estimateGas: {
    NO_KEY_FLAG(overrides?: CallOverrides): Promise<BigNumber>;

    addProblem(
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      urlToImgs: PromiseOrValue<string>[],
      asnwers: PromiseOrValue<string>[],
      workersMax: PromiseOrValue<BigNumberish>,
      taskPriceWei: PromiseOrValue<BigNumberish>,
      answersMax: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProblem(
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProblemTasks(
      _problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProblems(overrides?: CallOverrides): Promise<BigNumber>;

    getTaskAnswers(overrides?: CallOverrides): Promise<BigNumber>;

    getWorkerToProblemAnswerIds(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAnswerAllowed(
      answer: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSeedValid(
      seed: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<string>,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTaskNotAnsweredByWorker(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinProblem(
      problemId: PromiseOrValue<BigNumberish>,
      signal: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    problemFee(overrides?: CallOverrides): Promise<BigNumber>;

    problemStake(overrides?: CallOverrides): Promise<BigNumber>;

    problemToAnswers(
      problemId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    problems(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetActiveProblem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUseVerification(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    solveTask(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      cipheredAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taskAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    useVerification(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAndDecipher(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      taskAnswerIds: PromiseOrValue<BigNumberish>[],
      answers: PromiseOrValue<string>[],
      seedPhrase: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    workerToProblem(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    workerToProblemAnswerIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_KEY_FLAG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addProblem(
      title: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      urlToImgs: PromiseOrValue<string>[],
      asnwers: PromiseOrValue<string>[],
      workersMax: PromiseOrValue<BigNumberish>,
      taskPriceWei: PromiseOrValue<BigNumberish>,
      answersMax: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProblem(
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProblemTasks(
      _problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProblems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaskAnswers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWorkerToProblemAnswerIds(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAnswerAllowed(
      answer: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSeedValid(
      seed: PromiseOrValue<BytesLike>,
      message: PromiseOrValue<string>,
      signer: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTaskNotAnsweredByWorker(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinProblem(
      problemId: PromiseOrValue<BigNumberish>,
      signal: PromiseOrValue<string>,
      root: PromiseOrValue<BigNumberish>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problemFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problemStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    problemToAnswers(
      problemId: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    problems(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetActiveProblem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUseVerification(
      _state: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    solveTask(
      problemId: PromiseOrValue<BigNumberish>,
      taskId: PromiseOrValue<BigNumberish>,
      cipheredAnswer: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taskAnswers(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    useVerification(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAndDecipher(
      worker: PromiseOrValue<string>,
      problemId: PromiseOrValue<BigNumberish>,
      taskAnswerIds: PromiseOrValue<BigNumberish>[],
      answers: PromiseOrValue<string>[],
      seedPhrase: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    workerToProblem(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    workerToProblemAnswerIds(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
